local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- =============================
-- Конфиг
-- =============================
local WEBHOOK_URL = "https://discord.com/api/webhooks/1417846130619977738/mgmCuOeNpaNOBQddZUtCPaeheSjaBWdLNLfPPg2xk6-533OjiGgbjxwmkKPsQO7TK9ep" -- Вставь сюда Discord/Webhook URL или оставь пустым, чтобы не отправлять

-- Ключевые слова брейнротов (все приводятся к lower-case для сравнения)
local BRAINROT_KEYWORDS = {
	"Los Tralaleritos",
	"las Tralaleritas",
	"La Cucaracha",
	"Pot Hotspot",
	"nooo my hotspot",
	"los nooo my hotspotsitos",
	"los hotspotsitos",
	"los chicleteiras",
	"los tip i tacos",
	"los tipi tacos",
	"los orcalitos",
	"los matteos",
	"los bros",
	"los noobinis",
	"los crocodillitos",
	"los tacoritas",
	"las vaquitas saturnitas",
	"la vacca saturno saturnita",
	"nuclearo dinossauro",
	"chimpanzini bananini",
	"chimpanzini spiderini",
	"frigo camelo",
	"elefanto frigo",
	"gorillo watermelondrillo",
	"rhino toasterino",
	"sigma boy",
	"sigma girl",
	"skibidi",
	"tung tung tung sahur",
	"ta ta ta ta sahur",
	"Job Job Job Sahur",
	"to to to sahur",
	"ti ti ti sahur",
	"esok sekolah",
	"tictac sahur",
	"tim cheese",
	"fluriflura",
	"talpa di fero",
	"pipi kiwi",
	"pipi potato",
	"pipi corni",
	"pipi avocado",
	"gorillo subwoofero",
	"gattatino nyanino",
	"piccione macchina",
	"piccionetta machina",
	"orcalero orcala",
	"orcalita orcala",
	"brr brr patapim",
	"brri brri bicus dicus bombicus",
	"bambini crostini",
	"bisonte giuppitere",
	"torrtuginni dragonfrutini",
	"las sis",
	"la grande combinasion",
	"la supreme combinasion",
	"los combinasionas",
	"gangster footera",
	"bandito bobritto",
	"bandito axolito",
	"spioniro golubiro",
	"bombardiro crocodilo",
	"zibra zubra zibralini",
	"tigrilini watermelini",
	"carrotini brainini",
	"cocofanto elefanto",
	"girafa celestre",
	"tralalero tralala",
	"tralalita tralala",
	"trippi troppi",
	"trippi troppi troppa trippa",
	"trenostruzzo turbo 3000",
	"trenostruzzo turbo 4000",
	"ballerina cappuccina",
	"ballerino lololo",
	"bulbito bandito traktorito",
	"pakrahmatmamat",
	"cacasito satalito",
	"tartaruga cisterna",
	"mastodontico telepiedone",
	"la karkerkar combinasion",
	"dragon cannelloni",
	"spaghetti tualetti",
	"karkerkar kurkur",
	"dilg dug dug",
	"dug dug dug",
	"avocadini antilopini",
	"avocadini guffo",
	"orangutini ananassini",
	"blueberrinni octopusini",
	"quivioli ameleonni",
	"strawberry elephant",
	"smurf cat",
}

-- Путь до баз игроков
local PLOTS_FOLDER = Workspace:WaitForChild("Plots")

-- =============================
-- Утилиты
-- =============================
local function safeLower(str)
	if typeof(str) ~= "string" then
		return ""
	end
	return string.lower(str)
end

local function stringContainsAny(haystack, needles)
	haystack = safeLower(haystack)
	for _, needle in ipairs(needles) do
		if string.find(haystack, needle, 1, true) then
			return true
		end
	end
	return false
end

local function getFullPath(inst)
	local ok, result = pcall(function()
		return inst:GetFullName()
	end)
	return ok and result or inst.Name
end

local function isBrainrotInstance(inst)
	-- Признак: имя объекта содержит ключевые слова
	if not inst then return false end
	return stringContainsAny(inst.Name, BRAINROT_KEYWORDS)
end

local function resolveOwnerNameFromPlot(plot)
	-- Если в структуре плота есть хранение владельца, попробуем достать
	-- На практике часто встречаются значения типа StringValue/IntValue: Owner/OwnerId/UserId и т.п.
	for _, descendant in ipairs(plot:GetDescendants()) do
		if descendant:IsA("StringValue") and stringContainsAny(descendant.Name, {"owner", "username", "user"}) then
			if descendant.Value and #descendant.Value > 0 then
				return descendant.Value
			end
		end
		if descendant:IsA("IntValue") and stringContainsAny(descendant.Name, {"owner", "userid", "user_id"}) then
			local userId = descendant.Value
			if typeof(userId) == "number" and userId > 0 then
				local ok, nameOrErr = pcall(function()
					return Players:GetNameFromUserIdAsync(userId)
				end)
				if ok and typeof(nameOrErr) == "string" then
					return nameOrErr
				end
			end
		end
	end
	return nil
end

-- =============================
-- Сканирование и репортинг
-- =============================
local function collectBrainrotsInPlot(plot)
	local results = {}
	for _, d in ipairs(plot:GetDescendants()) do
		if isBrainrotInstance(d) then
			table.insert(results, {
				name = d.Name,
				class = d.ClassName,
				path = getFullPath(d),
			})
		end
	end
	return results
end

local function formatConsoleReport(plot, ownerName, entries)
	local header = string.format("[BrainrotScanner] Плот: %s%s | найдено: %d", plot.Name, ownerName and (" (owner: " .. ownerName .. ")") or "", #entries)
	print(header)
	for i, e in ipairs(entries) do
		local line = string.format("  #%d [%s] %s | %s", i, e.class, e.name, e.path)
		print(line)
	end
end

local function sendWebhook(payload)
	if WEBHOOK_URL == nil or WEBHOOK_URL == "" then
		return
	end

	local json = HttpService:JSONEncode(payload)

	-- Попытка через exploit HTTP (если есть)
	local request = (syn and syn.request) or (http and http.request) or (http_request) or (request)
	if typeof(request) == "function" then
		local ok, _ = pcall(function()
			request({
				Url = WEBHOOK_URL,
				Method = "POST",
				Headers = { ["Content-Type"] = "application/json" },
				Body = json,
			})
		end)
		return
	end

	-- Обычный Roblox HttpService (должен быть включен Allow HTTP Requests в игре)
	pcall(function()
		HttpService:PostAsync(WEBHOOK_URL, json, Enum.HttpContentType.ApplicationJson)
	end)
end

local function postDiscordSimple(content)
	if WEBHOOK_URL == nil or WEBHOOK_URL == "" then return end
	local truncated = content
	if #truncated > 1900 then
		truncated = string.sub(truncated, 1, 1900) .. "..."
	end
	sendWebhook({ content = "```\n" .. truncated .. "\n```" })
end

local function reportPlot(plot, entries)
	local ownerName = resolveOwnerNameFromPlot(plot)
	formatConsoleReport(plot, ownerName, entries)

	if WEBHOOK_URL ~= nil and WEBHOOK_URL ~= "" then
		-- Сформируем простой текстовый отчет
		local lines = {}
		table.insert(lines, string.format("Плот: %s%s | найдено: %d", plot.Name, ownerName and (" (owner: " .. ownerName .. ")") or "", #entries))
		for i, e in ipairs(entries) do
			table.insert(lines, string.format("#%d [%s] %s\n%s", i, e.class, e.name, e.path))
		end
		postDiscordSimple(table.concat(lines, "\n"))
	end
end

local function scanAllPlotsOnce()
	for _, plot in ipairs(PLOTS_FOLDER:GetChildren()) do
		local entries = collectBrainrotsInPlot(plot)
		if #entries > 0 then
			reportPlot(plot, entries)
		end
	end
end

-- =============================
-- Онлайновый мониторинг
-- =============================
local connections = {}

local function onPlotDescendantAdded(plot, inst)
	if isBrainrotInstance(inst) then
		local entries = {}
		table.insert(entries, {
			name = inst.Name,
			class = inst.ClassName,
			path = getFullPath(inst),
		})
		reportPlot(plot, entries)
	end
end

local function attachPlotWatch(plot)
	if connections[plot] then return end
	connections[plot] = plot.DescendantAdded:Connect(function(inst)
		onPlotDescendantAdded(plot, inst)
	end)
end

local function detachPlotWatch(plot)
	if connections[plot] then
		connections[plot]:Disconnect()
		connections[plot] = nil
	end
end

local function watchPlots()
	-- уже существующие
	for _, plot in ipairs(PLOTS_FOLDER:GetChildren()) do
		attachPlotWatch(plot)
	end
	-- новые и удаленные
	PLOTS_FOLDER.ChildAdded:Connect(function(child)
		attachPlotWatch(child)
	end)
	PLOTS_FOLDER.ChildRemoved:Connect(function(child)
		detachPlotWatch(child)
	end)
end

-- =============================
-- Старт
-- =============================
print("[BrainrotScanner] Стартую сканирование брейнротов в Workspace.Plots ...")
scanAllPlotsOnce()
watchPlots()
print("[BrainrotScanner] Мониторинг активирован. Новые брейнроты будут логироваться автоматически.")
