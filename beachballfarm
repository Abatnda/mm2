local function getDistance(pos1, pos2)
  return (pos1 - pos2).Magnitude
end

local function coinFarm()
  local char = LocalPlayer.Character
  local hrp = char and char:FindFirstChild("HumanoidRootPart")
  if not hrp then return end

  local originPosition = hrp.CFrame -- Запомнили стартовую позицию

  while getgenv().coinFarm do
    local hrpPos = hrp.Position
    local coinsInRange = {}

    -- Сканируем монеты в радиусе 150
    for _, part in pairs(workspace:GetDescendants()) do
      if part:IsA("BasePart") and part.Name == "Coin_Server" and part.Parent then
        local dist = getDistance(hrpPos, part.Position)
        if dist <= 150 and part.Position.Y > 0 then
          table.insert(coinsInRange, {part=part, dist=dist})
        end
      end
    end

    -- Сортируем по дистанции (от ближней к дальней)
    table.sort(coinsInRange, function(a,b)
      return a.dist < b.dist
    end)

    if #coinsInRange == 0 then
      -- Если нет монет рядом, возвращаемся в стартовую точку плавно
      local success, err = pcall(function()
        local tween = TweenService:Create(hrp, tweenInfo, {CFrame = originPosition})
        tween:Play()
        tween.Completed:Wait()
      end)
      if not success then warn("Tween error:", err) end

      task.wait(1) -- Подождать немного перед следующим сканом
    else
      -- Идём к каждой монете по очереди
      for _, info in pairs(coinsInRange) do
        if not getgenv().coinFarm then break end

        local coin = info.part
        if coin and coin.Parent then
          local success, err = pcall(function()
            local tween = TweenService:Create(hrp, tweenInfo, {CFrame = coin.CFrame})
            tween:Play()
            tween.Completed:Wait()
          end)
          if not success then warn("Tween error:", err) end

          task.wait(0.2) -- Небольшая пауза после достижения монеты
        end
      end
    end

    task.wait(0.3) -- Пауза перед новым циклом поиска монет
  end
end
